{"ast":null,"code":"const Booking = require('../models/Booking');\nconst User = require('../models/User');\nconst bcrypt = require('bcryptjs');\n\n/**\n * GET /api/employee/jobs\n * Fetch all jobs assigned to the logged-in employee\n */\nconst getJobs = async (req, res) => {\n  try {\n    const jobs = await Booking.find({\n      employee: req.user.id\n    }).populate('service', 'type price') // Populate service to get type and price\n    .populate('user', 'profile.name phone profile.address'); // Populate user to get customer name, phone, and address\n    res.json(jobs);\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching jobs',\n      error: err.message\n    });\n  }\n};\n\n/**\n * PUT /api/employee/jobs/:id\n * Update the status and notes of a job assigned to the logged-in employee\n */\nconst updateJobStatus = async (req, res) => {\n  try {\n    const allowedStatuses = ['Pending', 'In Progress', 'Completed', 'Cancelled', 'Pending - Weather', 'Pending - Customer Unavailable', 'Pending - Technical'];\n    const {\n      status,\n      notes\n    } = req.body; // Accept notes\n\n    if (!allowedStatuses.includes(status)) {\n      return res.status(400).json({\n        message: 'Invalid status value'\n      });\n    }\n    const job = await Booking.findOneAndUpdate({\n      _id: req.params.id,\n      employee: req.user.id\n    }, {\n      status,\n      notes\n    },\n    // Save notes\n    {\n      new: true\n    });\n    if (!job) return res.status(404).json({\n      message: 'Job not found or not assigned to this employee'\n    });\n    res.json(job);\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error updating job status',\n      error: err.message\n    });\n  }\n};\n\n/**\n * GET /api/employee/earnings\n * Fetch earnings and commission for the logged-in employee\n */\nconst getEmployeeEarnings = async (req, res) => {\n  try {\n    const employeeId = req.user.id;\n\n    // Find all bookings for this employee\n    const allBookings = await Booking.find({\n      employee: employeeId\n    }).populate('service', 'type price');\n    let totalEarnings = 0;\n    const earningsDetails = [];\n    let completedJobs = 0;\n    let inProgressJobs = 0;\n    let pendingJobs = 0;\n    let cancelledJobs = 0;\n    allBookings.forEach(booking => {\n      var _booking$service;\n      const servicePrice = ((_booking$service = booking.service) === null || _booking$service === void 0 ? void 0 : _booking$service.price) || 0;\n      if (booking.status === 'Completed') {\n        var _booking$service2;\n        totalEarnings += servicePrice;\n        completedJobs++;\n        earningsDetails.push({\n          id: booking._id,\n          job: ((_booking$service2 = booking.service) === null || _booking$service2 === void 0 ? void 0 : _booking$service2.type) || 'Unknown Service',\n          amount: servicePrice,\n          date: booking.date\n        });\n      } else if (booking.status === 'In Progress') {\n        inProgressJobs++;\n      } else if (booking.status.startsWith('Pending')) {\n        // Count all pending statuses\n        pendingJobs++;\n      } else if (booking.status === 'Cancelled') {\n        cancelledJobs++;\n      }\n    });\n\n    // Example: 10% commission\n    const commission = totalEarnings * 0.10;\n    res.json({\n      totalEarnings,\n      commission,\n      earningsDetails,\n      jobSummary: {\n        totalAssigned: allBookings.length,\n        completed: completedJobs,\n        inProgress: inProgressJobs,\n        pending: pendingJobs,\n        cancelled: cancelledJobs\n      }\n    });\n  } catch (err) {\n    res.status(500).json({\n      message: 'Error fetching employee earnings',\n      error: err.message\n    });\n  }\n};\n\n// Get logged-in employee's profile\nconst getEmployeeProfile = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select(\"-password\");\n    if (!user) {\n      return res.status(404).json({\n        message: \"Employee user not found\"\n      });\n    }\n    res.json(user);\n  } catch (err) {\n    console.error(\"❌ Employee profile fetch error:\", err.message);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n};\n\n// Update logged-in employee's profile\nconst updateEmployeeProfile = async (req, res) => {\n  try {\n    const {\n      profile,\n      phone\n    } = req.body;\n    const updateData = {};\n    if (profile) updateData.profile = profile;\n    const updatedUser = await User.findByIdAndUpdate(req.user.id, updateData, {\n      new: true,\n      runValidators: true\n    }).select(\"-password\");\n    if (!updatedUser) {\n      return res.status(404).json({\n        message: \"Employee user not found\"\n      });\n    }\n    res.json(updatedUser);\n  } catch (err) {\n    console.error(\"❌ Employee profile update error:\", err.message);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n};\n\n// Update logged-in employee's password\nconst updateEmployeePassword = async (req, res) => {\n  try {\n    const {\n      currentPassword,\n      newPassword\n    } = req.body;\n    if (!currentPassword || !newPassword) {\n      return res.status(400).json({\n        message: \"Current password and new password are required\"\n      });\n    }\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({\n        message: \"Employee user not found\"\n      });\n    }\n    const isMatch = await bcrypt.compare(currentPassword, user.password);\n    if (!isMatch) {\n      return res.status(400).json({\n        message: \"Current password is incorrect\"\n      });\n    }\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    await user.save();\n    res.json({\n      message: \"Password updated successfully\"\n    });\n  } catch (err) {\n    console.error(\"❌ Employee password update error:\", err.message);\n    res.status(500).json({\n      message: \"Server error\"\n    });\n  }\n};\n\n// Get employee's current working status\nconst getWorkingStatus = async (req, res) => {\n  try {\n    const employee = await User.findById(req.user.id).select('workingStatus');\n    if (!employee) {\n      return res.status(404).json({\n        message: 'Employee not found'\n      });\n    }\n    // Ensure workingStatus is 'free' if it's undefined in the database\n    const currentStatus = employee.workingStatus || 'free';\n    res.json({\n      workingStatus: currentStatus\n    });\n  } catch (err) {\n    console.error('Error fetching working status:', err);\n    res.status(500).json({\n      message: 'Server error',\n      error: err.message\n    });\n  }\n};\n\n// Toggle employee's working status\nconst toggleWorkingStatus = async (req, res) => {\n  try {\n    const employee = await User.findById(req.user.id);\n    if (!employee) {\n      console.log(\"[Toggle Status] Employee with ID \".concat(req.user.id, \" not found.\"));\n      return res.status(404).json({\n        message: 'Employee not found'\n      });\n    }\n\n    // If workingStatus is undefined, treat it as 'free' for the toggle logic\n    const currentStatus = employee.workingStatus || 'free';\n    console.log(\"[Toggle Status] Employee ID: \".concat(req.user.id, \", Current Status: \").concat(currentStatus));\n    employee.workingStatus = currentStatus === 'free' ? 'working' : 'free';\n    await employee.save();\n    console.log(\"[Toggle Status] New Status: \".concat(employee.workingStatus));\n    res.json({\n      message: 'Working status updated successfully',\n      workingStatus: employee.workingStatus\n    });\n  } catch (err) {\n    console.error('Error toggling working status:', err);\n    res.status(500).json({\n      message: 'Server error',\n      error: err.message\n    });\n  }\n};\nmodule.exports = {\n  getJobs,\n  updateJobStatus,\n  getEmployeeEarnings,\n  getEmployeeProfile,\n  updateEmployeeProfile,\n  updateEmployeePassword,\n  getWorkingStatus,\n  toggleWorkingStatus\n};","map":{"version":3,"names":["Booking","require","User","bcrypt","getJobs","req","res","jobs","find","employee","user","id","populate","json","err","status","message","error","updateJobStatus","allowedStatuses","notes","body","includes","job","findOneAndUpdate","_id","params","new","getEmployeeEarnings","employeeId","allBookings","totalEarnings","earningsDetails","completedJobs","inProgressJobs","pendingJobs","cancelledJobs","forEach","booking","_booking$service","servicePrice","service","price","_booking$service2","push","type","amount","date","startsWith","commission","jobSummary","totalAssigned","length","completed","inProgress","pending","cancelled","getEmployeeProfile","findById","select","console","updateEmployeeProfile","profile","phone","updateData","updatedUser","findByIdAndUpdate","runValidators","updateEmployeePassword","currentPassword","newPassword","isMatch","compare","password","hashedPassword","hash","save","getWorkingStatus","currentStatus","workingStatus","toggleWorkingStatus","log","concat","module","exports"],"sources":["D:/acm/ACM-main/client/src/pages/employee/EmployeeStatus.js"],"sourcesContent":["const Booking = require('../models/Booking');\nconst User = require('../models/User');\nconst bcrypt = require('bcryptjs');\n\n/**\n * GET /api/employee/jobs\n * Fetch all jobs assigned to the logged-in employee\n */\nconst getJobs = async (req, res) => {\n  try {\n    const jobs = await Booking.find({ employee: req.user.id })\n      .populate('service', 'type price') // Populate service to get type and price\n      .populate('user', 'profile.name phone profile.address'); // Populate user to get customer name, phone, and address\n    res.json(jobs);\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching jobs', error: err.message });\n  }\n};\n\n/**\n * PUT /api/employee/jobs/:id\n * Update the status and notes of a job assigned to the logged-in employee\n */\nconst updateJobStatus = async (req, res) => {\n  try {\n    const allowedStatuses = [\n      'Pending', \n      'In Progress', \n      'Completed', \n      'Cancelled',\n      'Pending - Weather', \n      'Pending - Customer Unavailable', \n      'Pending - Technical'\n    ];\n    const { status, notes } = req.body; // Accept notes\n\n    if (!allowedStatuses.includes(status)) {\n      return res.status(400).json({ message: 'Invalid status value' });\n    }\n\n    const job = await Booking.findOneAndUpdate(\n      { _id: req.params.id, employee: req.user.id },\n      { status, notes }, // Save notes\n      { new: true }\n    );\n\n    if (!job) return res.status(404).json({ message: 'Job not found or not assigned to this employee' });\n\n    res.json(job);\n  } catch (err) {\n    res.status(500).json({ message: 'Error updating job status', error: err.message });\n  }\n};\n\n/**\n * GET /api/employee/earnings\n * Fetch earnings and commission for the logged-in employee\n */\nconst getEmployeeEarnings = async (req, res) => {\n  try {\n    const employeeId = req.user.id;\n\n    // Find all bookings for this employee\n    const allBookings = await Booking.find({ employee: employeeId })\n      .populate('service', 'type price');\n\n    let totalEarnings = 0;\n    const earningsDetails = [];\n    let completedJobs = 0;\n    let inProgressJobs = 0;\n    let pendingJobs = 0;\n    let cancelledJobs = 0;\n\n    allBookings.forEach(booking => {\n      const servicePrice = booking.service?.price || 0;\n      if (booking.status === 'Completed') {\n        totalEarnings += servicePrice;\n        completedJobs++;\n        earningsDetails.push({\n          id: booking._id,\n          job: booking.service?.type || 'Unknown Service',\n          amount: servicePrice,\n          date: booking.date,\n        });\n      } else if (booking.status === 'In Progress') {\n        inProgressJobs++;\n      } else if (booking.status.startsWith('Pending')) { // Count all pending statuses\n        pendingJobs++;\n      } else if (booking.status === 'Cancelled') {\n        cancelledJobs++;\n      }\n    });\n\n    // Example: 10% commission\n    const commission = totalEarnings * 0.10;\n\n    res.json({\n      totalEarnings,\n      commission,\n      earningsDetails,\n      jobSummary: {\n        totalAssigned: allBookings.length,\n        completed: completedJobs,\n        inProgress: inProgressJobs,\n        pending: pendingJobs,\n        cancelled: cancelledJobs,\n      }\n    });\n  } catch (err) {\n    res.status(500).json({ message: 'Error fetching employee earnings', error: err.message });\n  }\n};\n\n// Get logged-in employee's profile\nconst getEmployeeProfile = async (req, res) => {\n  try {\n    const user = await User.findById(req.user.id).select(\"-password\");\n    if (!user) {\n      return res.status(404).json({ message: \"Employee user not found\" });\n    }\n    res.json(user);\n  } catch (err) {\n    console.error(\"❌ Employee profile fetch error:\", err.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\n// Update logged-in employee's profile\nconst updateEmployeeProfile = async (req, res) => {\n  try {\n    const { profile, phone } = req.body; \n\n    const updateData = {};\n    if (profile) updateData.profile = profile;\n\n    const updatedUser = await User.findByIdAndUpdate(\n      req.user.id,\n      updateData,\n      { new: true, runValidators: true }\n    ).select(\"-password\");\n\n    if (!updatedUser) {\n      return res.status(404).json({ message: \"Employee user not found\" });\n    }\n\n    res.json(updatedUser);\n  } catch (err) {\n    console.error(\"❌ Employee profile update error:\", err.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\n// Update logged-in employee's password\nconst updateEmployeePassword = async (req, res) => {\n  try {\n    const { currentPassword, newPassword } = req.body;\n\n    if (!currentPassword || !newPassword) {\n      return res.status(400).json({ message: \"Current password and new password are required\" });\n    }\n\n    const user = await User.findById(req.user.id);\n    if (!user) {\n      return res.status(404).json({ message: \"Employee user not found\" });\n    }\n\n    const isMatch = await bcrypt.compare(currentPassword, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ message: \"Current password is incorrect\" });\n    }\n\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\n    user.password = hashedPassword;\n    await user.save();\n\n    res.json({ message: \"Password updated successfully\" });\n  } catch (err) {\n    console.error(\"❌ Employee password update error:\", err.message);\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\n// Get employee's current working status\nconst getWorkingStatus = async (req, res) => {\n  try {\n    const employee = await User.findById(req.user.id).select('workingStatus');\n    if (!employee) {\n      return res.status(404).json({ message: 'Employee not found' });\n    }\n    // Ensure workingStatus is 'free' if it's undefined in the database\n    const currentStatus = employee.workingStatus || 'free'; \n    res.json({ workingStatus: currentStatus });\n  } catch (err) {\n    console.error('Error fetching working status:', err);\n    res.status(500).json({ message: 'Server error', error: err.message });\n  }\n};\n\n// Toggle employee's working status\nconst toggleWorkingStatus = async (req, res) => {\n  try {\n    const employee = await User.findById(req.user.id);\n    if (!employee) {\n      console.log(`[Toggle Status] Employee with ID ${req.user.id} not found.`);\n      return res.status(404).json({ message: 'Employee not found' });\n    }\n\n    // If workingStatus is undefined, treat it as 'free' for the toggle logic\n    const currentStatus = employee.workingStatus || 'free'; \n    console.log(`[Toggle Status] Employee ID: ${req.user.id}, Current Status: ${currentStatus}`);\n\n    employee.workingStatus = currentStatus === 'free' ? 'working' : 'free';\n    await employee.save();\n\n    console.log(`[Toggle Status] New Status: ${employee.workingStatus}`);\n\n    res.json({ message: 'Working status updated successfully', workingStatus: employee.workingStatus });\n  } catch (err) {\n    console.error('Error toggling working status:', err);\n    res.status(500).json({ message: 'Server error', error: err.message });\n  }\n};\n\n\nmodule.exports = { \n  getJobs, \n  updateJobStatus, \n  getEmployeeEarnings,\n  getEmployeeProfile,\n  updateEmployeeProfile,\n  updateEmployeePassword,\n  getWorkingStatus,     \n  toggleWorkingStatus   \n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}