{"ast":null,"code":"import axios from 'axios';\nimport { logout } from './authUtils'; // Import logout utility\n\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // Your backend API base URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Optional: Add an interceptor to include the JWT token in every request\napi.interceptors.request.use(config => {\n  const token = sessionStorage.getItem('token'); // Changed from localStorage\n  if (token) {\n    config.headers.Authorization = \"Bearer \".concat(token);\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add an interceptor for responses to handle 401/403 errors globally\napi.interceptors.response.use(response => response, error => {\n  if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n    console.warn('Authentication error (401/403) detected. Logging out...');\n    logout(); // Use the centralized logout function\n    // Optionally redirect to login page, but ProtectedRoute should handle this\n    // window.location.href = '/login'; \n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","logout","api","create","baseURL","headers","interceptors","request","use","config","token","sessionStorage","getItem","Authorization","concat","error","Promise","reject","response","status","console","warn"],"sources":["D:/acm/ACM-main/client/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { logout } from './authUtils'; // Import logout utility\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api', // Your backend API base URL\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Optional: Add an interceptor to include the JWT token in every request\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = sessionStorage.getItem('token'); // Changed from localStorage\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add an interceptor for responses to handle 401/403 errors globally\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\r\n      console.warn('Authentication error (401/403) detected. Logging out...');\r\n      logout(); // Use the centralized logout function\r\n      // Optionally redirect to login page, but ProtectedRoute should handle this\r\n      // window.location.href = '/login'; \r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,aAAa,CAAC,CAAC;;AAEtC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAE,2BAA2B;EAAE;EACtCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,aAAAC,MAAA,CAAaJ,KAAK,CAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACI,YAAY,CAACY,QAAQ,CAACV,GAAG,CAC1BU,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,KAAKH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAIJ,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,CAAC,EAAE;IACtFC,OAAO,CAACC,IAAI,CAAC,yDAAyD,CAAC;IACvEpB,MAAM,CAAC,CAAC,CAAC,CAAC;IACV;IACA;EACF;EACA,OAAOe,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}